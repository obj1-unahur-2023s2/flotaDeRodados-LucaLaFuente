import wollok.game.*

program corsasEnElGame {
	// hacer las inicializaciones necesarias 
	
	game.start()
}

class Corsa{
	
	var color
	
	method color() = color
	method capacidad() = 4
	method velMaxima() = 150
	method peso() = 1300
}

class Kwid{
	
	var tanque 
	
	method capacidad() = if (tanque) { 3 } else { 4 }
	method velMaxima() = if (tanque) { 120 } else { 110 }
	method peso() = if (tanque) { 1350 } else { 1200 }
	method color() = "azul"
}

object trafic{
	
	var property interior
	var property motor
	
	method pesoInterior() = if(interior == "comodo") { 700 } else 1000
	method pesoMotor() = if(motor == "pulenta") { 800 } else 500
	
	method peso() = 4000 + self.pesoInterior() + self.pesoMotor()
	method capacidad() = if (interior == "comodo") { 5 } else { 12 }
	method velMaxima() = if (motor == "pulenta") { 130 } else { 80 }
	method color() = "blanco"
}

object autoEspecial1{
	
	method peso() = 1000
	method capacidad() = 2
	method velMaxima() = 100
	method color() = "rojo"
}

object autoEspecial2{
	
	method peso() = 4000
	method capacidad() = 6
	method velMaxima() = 80
	method color() = "verde"
}

object autoEspecial3{
	
	method peso() = 1500
	method capacidad() = 4
	method velMaxima() = 115
	method color() = "naranja"
}


import example.*

class Dependencias{
	
	const rodados = []
	
	method agregarAFlota(rodado){
		
		rodados.add(rodado)
	}
	method quiarDeFlota(rodado){
		
		rodados.remove(rodado)
	}
	
	method pesoTotalFlota() = rodados.sum({r => r.peso()})
	
	method estaBienEquipada() = rodados.size() >= 3 and rodados.all({r => r.velMaxima() > 100})
	
	method capacidadTotalEnColor(color) = ( rodados.filter({r => r.color() == color}) ).sum({r => r.capacidad()})
	
	method rodadoMasRapido() = rodados.max({r => r.velMaxima()})
		
	
	method colorDelRodadoMasRapido() = self.rodadoMasRapido().color()
}
